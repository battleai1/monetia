üéØ –¶–µ–ª—å

–°–¥–µ–ª–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–¥–µ–æ-—Ñ–∏–¥ (–≤ —Å—Ç–∏–ª–µ Instagram Reels) –≤ Replit/Telegram WebApp, –∫–æ—Ç–æ—Ä—ã–π:

–í—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ ¬´—á—ë—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω —Å–æ –∑–≤—É–∫–æ–º¬ª),

–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ, –±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –∑–≤—É–∫–∞/–≥–æ–Ω–æ–∫,

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∂–µ—Å—Ç—ã: –¥–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–≤–∞/—Ü–µ–Ω—Ç—Ä–∞ ‚Üí –ø–∞—É–∑–∞/—Ä–µ–∑—é–º, –¥–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ ‚Üí x2 –ø–æ–∫–∞ –¥–µ—Ä–∂–∏–º,

–†–∞–±–æ—Ç–∞–µ—Ç –≤ iOS/Android Telegram WebView –∏ –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö (Safari/Chrome/Edge/Firefox),

–ù–µ –ª–æ–º–∞–µ—Ç—Å—è –≤ Replit preview –∏ ¬´–≤ –Ω–æ–≤–æ–º —Ç–∞–±–µ¬ª.

üì¶ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

–ü–ª–µ–µ—Ä: <video> + –Ω–∞—Ç–∏–≤–Ω—ã–π HLS –Ω–∞ iOS, hls.js –Ω–∞ Android/–¥–µ—Å–∫—Ç–æ–ø.

–ë–µ–∑ video.js –∏ —Ç—è–∂—ë–ª—ã—Ö –æ–±—ë—Ä—Ç–æ–∫.

–Ø–ü: TypeScript (–∏–ª–∏ JS, –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –±–µ–∑ TS). React ‚Äî –µ—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

üß± –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
A) –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞

–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å VideoController (singleton):

register(videoEl, hlsUrl, id) ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–æ–Ω–æ–∫, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).

activate(id) ‚Äî –¥–µ–ª–∞–µ—Ç –≤–∏–¥–µ–æ –∞–∫—Ç–∏–≤–Ω—ã–º, —Å—Ç–∞–≤–∏—Ç –ø–∞—É–∑—É –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ, —Å–Ω–∏–º–∞–µ—Ç muted=false —Ç–æ–ª—å–∫–æ —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ.

pauseAll(exceptId?) ‚Äî –ø–∞—É–∑–∞ –∏ muted=true –≤—Å–µ–º, –∫—Ä–æ–º–µ exceptId.

destroy(id) ‚Äî –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: stopLoad/detach/destroy, —Å–Ω—è—Ç–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π, –æ—á–∏—Å—Ç–∫–∞ src.

–ì–∞—Ä–∞–Ω—Ç–∏–∏: –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –º–∞–∫—Å–∏–º—É–º –æ–¥–∏–Ω Hls() –Ω–∞ id, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç.

B) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HLS —Å ¬´–∂–µ–ª–µ–∑–Ω–æ–π¬ª —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞:

playsInline, webkit-playsinline, muted=true (–¥–æ –ø–µ—Ä–≤–æ–≥–æ –∂–µ—Å—Ç–∞), loop=true, preload="metadata", crossorigin="anonymous".

iOS (WKWebView/Safari): –µ—Å–ª–∏ video.canPlayType('application/vnd.apple.mpegURL') ‚Üí –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hls.js, –ø—Ä–æ—Å—Ç–æ video.src = m3u8; video.load();.

–ò–Ω–∞—á–µ: new Hls({ lowLatencyMode:true, capLevelToPlayerSize:true, progressive:true, backBufferLength:30 }), attachMedia, –Ω–∞ MEDIA_ATTACHED ‚Üí loadSource, startLoad.

–ù–∞ MANIFEST_PARSED:

–æ—Ç–±—Ä–æ—Å–∏—Ç—å audio-only —É—Ä–æ–≤–Ω–∏ (level.width||level.height),

–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤—ã–±—Ä–∞—Ç—å H.264 (avc1), –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–π –≤–∏–¥–µ–æ-—É—Ä–æ–≤–µ–Ω—å: hls.currentLevel = pick.

–ù–∞ ERROR.fatal ‚Üí destroy(); (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å fallback MP4, –µ—Å–ª–∏ –µ—Å—Ç—å.

C) CSS ¬´Safe Mode¬ª (—É–±–∏—Ä–∞–µ—Ç —á—ë—Ä–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã)

–ù–∏ —É <video>, –Ω–∏ —É –µ–≥–æ –ø—Ä–µ–¥–∫–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: transform (–≤–∫–ª—é—á–∞—è translateZ(0)), filter, backdrop-filter, mix-blend-mode, perspective, will-change.
–°–∫—Ä—É–≥–ª–µ–Ω–∏—è/–∫–ª–∏–ø–ø–∏–Ω–≥ ‚Äî –Ω–µ –Ω–∞ <video>, –∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –≤—Ä–∞–ø–ø–µ—Ä–µ.
–í—ã—Å–æ—Ç—ã ‚Äî —á–µ—Ä–µ–∑ 100dvh, –Ω–µ 100vh.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å <video> —á–µ—Ä–µ–∑ display:none ‚Äî —Ç–æ–ª—å–∫–æ opacity:0; pointer-events:none; visibility:hidden.

html, body { height:100%; margin:0; background:#000; }
.feed { min-height:100dvh; }
.feed-item { height:100dvh; }

.reel-card { position:relative; width:100%; height:100%; background:#000; }
.reel-card-inner { position:absolute; inset:0; overflow:hidden; border-radius:16px; }

.reel-video {
  position:absolute; inset:0; width:100%; height:100%;
  object-fit:cover; background:#000;
}

D) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é/–∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º

IntersectionObserver —Å threshold: [0,0.2,0.6,0.8,1].

–ö–∞—Ä—Ç–æ—á–∫–∞ ‚â• 60% –≤–æ –≤—å—é–ø–æ—Ä—Ç–µ ‚Üí activate(id) –∏ play(). –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî pause.

–ù–∞ visibilitychange/pagehide ‚Üí pauseAll(), –∫—Ä–æ–º–µ —Ä–µ–∂–∏–º–∞ Replit iframe (—Å–º. Dev-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∏–∂–µ).

E) –ñ–µ—Å—Ç—ã (Pointer Events)

pointerdown ‚Üí —á–µ—Ä–µ–∑ setTimeout(180ms) —Å—á–∏—Ç–∞–µ–º ¬´–¥–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ¬ª.

–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ x –∫–∞—Å–∞–Ω–∏—è:

x <= 0.66 ‚Üí toggle –ø–∞—É–∑–∞/—Ä–µ–∑—é–º (–∏ activate() –ø—Ä–∏ —Ä–µ–∑—é–º–µ),

x > 0.66 ‚Üí –ø–æ–∫–∞ –¥–µ—Ä–∂–∏–º: playbackRate = 2.0, –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –≤–µ—Ä–Ω—É—Ç—å 1.0.

–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–ø (<180ms) ‚Äî –∏–≥–Ω–æ—Ä (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å–∫—Ä–æ–ª–ª—É).

–°–ª—É—à–∞—Ç–µ–ª–∏ –≤–µ—à–∞—Ç—å –Ω–∞ —Å–ª–æ–π-–æ–≤–µ—Ä–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.

F) Telegram WebApp –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–í—ã–∑–≤–∞—Ç—å Telegram.WebApp.ready() –∏ Telegram.WebApp.expand() (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).

iOS –≤ Telegram ‚Üí –≤—Å–µ–≥–¥–∞ –Ω–∞—Ç–∏–≤–Ω—ã–π HLS (—Å–º. B).

–ò—Å–∫–ª—é—á–∏—Ç—å –ª–æ–∂–Ω—ã–µ –ø–∞—É–∑—ã –ø–æ visibilitychange –≤ TG (–∏–Ω–æ–≥–¥–∞ WebView —Ä–µ–ø–æ—Ä—Ç–∏—Ç ¬´hidden¬ª, —Ö–æ—Ç—è —ç–∫—Ä–∞–Ω –≤–∏–¥–µ–Ω).

G) Dev-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Replit preview

–ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ iframe Replit ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ visibilitychange; —Ñ–æ—Ä—Å-–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–æ–ª–∏–∫ —á–µ—Ä–µ–∑ setTimeout(300‚Äì400ms) ‚Äî —Ç.–∫. IO –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–±—Ä–∞—Ç—å 0.6.

üîê –°–µ—Ç—å –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–¢–æ–ª—å–∫–æ HTTPS –¥–ª—è m3u8 –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–Ω–µ –¥–æ–ø—É—Å–∫–∞—Ç—å Mixed Content).

–ù–∞ CDN –≤–∫–ª—é—á–∏—Ç—å CORS (Access-Control-Allow-Origin: * –∏–ª–∏ –Ω—É–∂–Ω—ã–π origin).

–í master.m3u8 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å H.264 (avc1) —Ä–µ–Ω–¥–∏—à–µ–Ω—ã (–º–∏–Ω–∏–º—É–º 480p/720p) + AAC (mp4a). –ï—Å–ª–∏ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ hvc1/av01 ‚Üí –¥–æ–±–∞–≤–∏—Ç—å avc1.

üß© –§–∞–π–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞
1) video-controller.ts
import Hls from 'hls.js';

type Entry = {
  id: string;
  el: HTMLVideoElement;
  hls?: Hls | null;
  ac?: AbortController;
  src: string;
};

const isIOS =
  /iP(hone|od|ad)/.test(navigator.platform) ||
  (navigator.userAgent.includes('Mac') && 'ontouchend' in document);

export class VideoController {
  private players = new Map<string, Entry>();
  private activeId: string | null = null;

  register(el: HTMLVideoElement, src: string, id: string) {
    // cleanup if re-registering
    if (this.players.has(id)) this.destroy(id);

    el.setAttribute('playsinline', '');
    el.setAttribute('webkit-playsinline', 'true');
    el.playsInline = true;
    el.muted = true;
    el.loop = true;
    el.preload = 'metadata';
    el.crossOrigin = 'anonymous';

    const entry: Entry = { id, el, src, hls: null, ac: new AbortController() };
    this.players.set(id, entry);

    const { signal } = entry.ac!;
    (async () => {
      try {
        if (signal.aborted) return;

        if (isIOS && el.canPlayType('application/vnd.apple.mpegURL')) {
          el.src = src; el.load();
        } else if (Hls.isSupported()) {
          const hls = new Hls({ lowLatencyMode:true, capLevelToPlayerSize:true, progressive:true, backBufferLength:30 });
          entry.hls = hls;
          hls.attachMedia(el);
          hls.on(Hls.Events.MEDIA_ATTACHED, () => { hls.loadSource(src); hls.startLoad(); });
          hls.on(Hls.Events.MANIFEST_PARSED, (_evt, d:any) => {
            const videoLvls = d.levels.map((lvl:any,i:number)=>({i,lvl}))
              .filter((x:any)=>x.lvl.width||x.lvl.height);
            const avc1 = videoLvls.find((x:any)=>(x.lvl.videoCodec||'').toLowerCase().includes('avc1'));
            const pick = (avc1 ?? videoLvls[0]);
            if (pick) hls.currentLevel = pick.i;
          });
          hls.on(Hls.Events.ERROR, (_evt, data:any) => {
            if (data.fatal) { try { hls.destroy(); } catch {} entry.hls = null; }
          });
        } else {
          el.src = src; el.load(); // fallback (mp4, –µ—Å–ª–∏ –¥–∞–Ω)
        }
      } catch {}
    })();
  }

  activate(id: string) {
    if (this.activeId === id) return;
    this.pauseAll(id);
    this.activeId = id;
    const e = this.players.get(id);
    if (!e) return;
    e.el.muted = false;
    e.el.play().catch(()=>{});
  }

  pauseAll(exceptId?: string) {
    for (const [pid, e] of this.players) {
      if (exceptId && pid === exceptId) continue;
      try { e.el.playbackRate = 1.0; e.el.pause(); e.el.muted = true; } catch {}
    }
  }

  destroy(id: string) {
    const e = this.players.get(id);
    if (!e) return;
    e.ac?.abort();
    try { e.hls?.stopLoad(); e.hls?.detachMedia(); e.hls?.destroy(); } catch {}
    try { e.el.removeAttribute('src'); e.el.load(); } catch {}
    this.players.delete(id);
    if (this.activeId === id) this.activeId = null;
  }
}

export const videoController = new VideoController();

2) –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ (React) ReelCard.tsx
import { useEffect, useRef } from 'react';
import { videoController } from './video-controller';

export default function ReelCard({ id, hlsUrl }: {id:string; hlsUrl:string}) {
  const vRef = useRef<HTMLVideoElement>(null);
  const holdTimer = useRef<number | null>(null);
  const holdingRight = useRef(false);

  useEffect(() => {
    const v = vRef.current!;
    videoController.register(v, hlsUrl, id);
    return () => videoController.destroy(id);
  }, [id, hlsUrl]);

  useEffect(() => {
    const v = vRef.current!;
    const onDown = (e: PointerEvent) => {
      const rect = v.getBoundingClientRect();
      const xf = (e.clientX - rect.left) / rect.width;
      const t = window.setTimeout(() => {
        if (xf > 0.66) {
          holdingRight.current = true;
          videoController.activate(id);
          v.playbackRate = 2.0;
          v.play().catch(()=>{});
        } else {
          if (v.paused) videoController.activate(id); else v.pause();
        }
      }, 180);
      holdTimer.current = t as unknown as number;

      const stop = () => {
        if (holdTimer.current) { clearTimeout(holdTimer.current); holdTimer.current = null; }
        if (holdingRight.current) { holdingRight.current = false; v.playbackRate = 1.0; }
        window.removeEventListener('pointerup', stop);
        window.removeEventListener('pointercancel', stop);
      };
      window.addEventListener('pointerup', stop, { passive: true });
      window.addEventListener('pointercancel', stop, { passive: true });
    };
    v.addEventListener('pointerdown', onDown, { passive: false });
    return () => v.removeEventListener('pointerdown', onDown);
  }, [id]);

  return (
    <div className="reel-card">
      <div className="reel-card-inner">
        <video
          ref={vRef}
          className="reel-video"
          playsInline
          webkit-playsinline="true"
          muted
          loop
          preload="metadata"
          crossOrigin="anonymous"
        />
      </div>
    </div>
  );
}

3) –§–∏–¥ + IntersectionObserver ReelFeed.tsx
import { useEffect, useRef } from 'react';
import { videoController } from './video-controller';

const inIframe = window.top !== window.self;
const isReplit = /replit/i.test(location.hostname) || /replit/i.test(document.referrer);
const isTelegram = /Telegram/i.test(navigator.userAgent) || (window as any).Telegram?.WebApp;

export default function ReelFeed({ items }:{items:{id:string; url:string}[]}) {
  const cards = useRef<Map<string, HTMLElement>>(new Map());

  useEffect(() => {
    try { (window as any).Telegram?.WebApp?.ready?.(); (window as any).Telegram?.WebApp?.expand?.(); } catch {}

    const io = new IntersectionObserver((entries) => {
      let best: {id:string; ratio:number} | null = null;
      for (const e of entries) {
        const id = (e.target as HTMLElement).dataset['id']!;
        if (e.isIntersecting) {
          if (!best || e.intersectionRatio > best.ratio) best = { id, ratio: e.intersectionRatio };
        }
      }
      if (best && best.ratio >= 0.6) videoController.activate(best.id);
    }, { threshold: [0,0.2,0.6,0.8,1] });

    for (const [, el] of cards.current) io.observe(el);

    // –ù–µ —Å—Ç–æ–ø–∞–µ–º –≤ TG –∏ Replit-iframe (–ª–æ–∂–Ω—ã–µ hidden)
    if (!isTelegram && !(inIframe && isReplit)) {
      const onVis = () => { if (document.visibilityState !== 'visible') videoController.pauseAll(); };
      document.addEventListener('visibilitychange', onVis);
      window.addEventListener('pagehide', () => videoController.pauseAll());
      return () => { io.disconnect(); document.removeEventListener('visibilitychange', onVis); };
    } else {
      // Dev: —Ñ–æ—Ä—Å-–∞–∫—Ç–∏–≤–∞—Ü–∏—è 1-–≥–æ —Ä–æ–ª–∏–∫–∞
      setTimeout(() => { if (items[0]) videoController.activate(items[0].id); }, 400);
      return () => { io.disconnect(); };
    }
  }, [items]);

  return (
    <div className="feed">
      {items.map(it => (
        <div
          key={it.id}
          data-id={it.id}
          ref={el => { if (el) cards.current.set(it.id, el); else cards.current.delete(it.id); }}
          className="feed-item"
        >
          {/* ReelCard –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏ –ø—Ä–æ–∫–∏–Ω—å hlsUrl=it.url */}
        </div>
      ))}
    </div>
  );
}

‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏—ë–º–∫–∏

–ö–∞—Ä—Ç–∏–Ω–∫–∞ –µ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:

iOS Safari/Telegram WebApp: –≤–∏–¥–µ–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è (–≤–∏–¥–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ), –±–µ–∑ —Ñ—É–ª–ª—Å–∫—Ä–∏–Ω–∞, playsinline —Ä–∞–±–æ—Ç–∞–µ—Ç.

Android Chrome/Telegram WebApp: –≤–∏–¥–µ–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, –Ω–µ—Ç ¬´—á—ë—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–æ –∑–≤—É–∫–æ–º¬ª.

–ù–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–≤—É–∫–∞: –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–∫—Ä–æ–ª–ª–µ –∞–∫—Ç–∏–≤–µ–Ω –æ–¥–∏–Ω –ø–ª–µ–µ—Ä; —Ñ–æ–Ω–æ–≤–æ–≥–æ ¬´–ø–æ–¥–ø–µ–≤–∞—é—â–µ–≥–æ¬ª –∑–≤—É–∫–∞ –Ω–µ—Ç.

–ù–µ—Ç –≥–æ–Ω–æ–∫: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Å–º–µ–Ω–∞ src –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –ª–∏—à–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã Hls; —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–∞—é—Ç—Å—è.

–ñ–µ—Å—Ç—ã: —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–≤–∞/—Ü–µ–Ω—Ç—Ä–∞ ‚â•180ms ‚Äî –ø–∞—É–∑–∞/—Ä–µ–∑—é–º; —Å–ø—Ä–∞–≤–∞ ‚Äî x2 –Ω–∞ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è.

–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –∫–∞—Ä—Ç–æ—á–∫–∞ ‚â•60% ‚Äî –∏–≥—Ä–∞–µ—Ç, –¥—Ä—É–≥–∏–µ ‚Äî —Å—Ç–æ—è—Ç –Ω–∞ –ø–∞—É–∑–µ. –°–≤–µ—Ä–Ω—É–ª–∏ –≤–∫–ª–∞–¥–∫—É (–∫—Ä–æ–º–µ TG/iframe Replit dev) ‚Äî –≤—Å—ë –Ω–∞ –ø–∞—É–∑–µ.

CSS-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –Ω–∏–≥–¥–µ —Ä—è–¥–æ–º —Å <video> –Ω–µ—Ç transform/filter/backdrop-filter/mix-blend-mode/perspective –Ω–∞ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞.

–ö–æ–¥–µ–∫–∏: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤ MANIFEST —Å videoCodec = avc1*, audioCodec = mp4a*. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ CDN.

üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–≤—Å—Ç—Ä–æ–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ)

–í register –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏:

hls.on(Hls.Events.MANIFEST_PARSED, (_e, d:any) => {
  console.log('[levels]', d.levels.map((l:any)=>({w:l.width,h:l.height,v:l.videoCodec,a:l.audioCodec})));
});


–ï—Å–ª–∏ –Ω–µ—Ç avc1 ‚Äî —ç—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ (–¥–æ–±–∞–≤–∏—Ç—å H.264/AAC —Ä–µ–Ω–¥–∏—à–µ–Ω—ã).

üß™ –ú–∏–Ω–∏-—Ç–µ—Å—Ç-–ø–ª–∞–Ω

iOS Telegram WebApp + Safari: –æ—Ç–∫—Ä—ã—Ç—å, —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –∂–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç.

Android Telegram WebApp + Chrome: —Ç–æ –∂–µ.

–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª 20+ –∫–∞—Ä—Ç–æ—á–µ–∫: –Ω–µ—Ç —Ñ–∞–Ω—Ç–æ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞.

Replit: –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚ÄúOpen in new tab‚Äù –∏ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –¥–µ–≤–∞–π—Å–µ ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤–∏–¥–Ω–∞; –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º iframe –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è dev-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ G.

üö´ –ß—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ

display:none –Ω–∞ <video> –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏.

transform/filter/backdrop-filter/mix-blend-mode/perspective –Ω–∞ <video> –∏ –µ–≥–æ –ø—Ä–µ–¥–∫–∞—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hls.js –Ω–∞ iOS, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞—Ç–∏–≤–Ω—ã–π HLS.

–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Hls() –¥–ª—è –æ–¥–Ω–æ–≥–æ id.

üìÑ –ß—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å

video-controller.ts (–∫–∞–∫ –≤—ã—à–µ).

ReelCard.tsx (–∂–µ—Å—Ç—ã + –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã).

ReelFeed.tsx (IO + –∏—Å–∫–ª—é—á–µ–Ω–∏—è TG/Replit).

styles.css (safe-mode –±–ª–æ–∫).

–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ debug.html —Å –æ–¥–Ω–∏–º <video> –∏ —Ç–µ–º –∂–µ m3u8 –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–µ–∫–æ–≤ (–≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ = –æ–∫).

–°–¥–µ–ª–∞–π –∫–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É –¢–ó. –ó–∞—Ç–µ–º –ø—Ä–æ–≥–æ–Ω–∏ —Ç–µ—Å—Ç-–ø–ª–∞–Ω. –ï—Å–ª–∏ [levels] –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç avc1 ‚Äî —Å–æ–æ–±—â–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å H.264/AAC –≤ –º–∞—Å—Ç–µ—Ä –Ω–∞ CDN.